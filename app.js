const taxtRate = 0.18;
const shippingPrice = 20;
const shippingFreePrice = 300;

window.addEventListener("load",()=>{
    localStorage.setItem("taxtRate", taxtRate);
    localStorage.setItem("shippingPrice",shippingPrice);
    localStorage.setItem("shippingFreePrice",shippingFreePrice);

});//set item gÃ¶ndermek get item Ã§aÄŸÄ±rmak
//ðŸ‘†sayfa yÃ¼klendiÄŸinde local storag'e taxRate ,shippingPrice ,shippingFreePrice verilerini gÃ¶nderdik.Local storage ile session storage arasÄ±ndaki fark ÅŸu :session storage de telefonu veya bilgisayarÄ± kapatÄ±nca depolanan veriler silinmiÅŸ oluyor.localde veriler her durumda browser da saklÄ± kalÄ±yor.Local storage: JavaScript sitelerinin ve uygulamalarÄ±nÄ±n son kullanma tarihi olmadan, bir web tarayÄ±cÄ±sÄ±nda anahtar/deÄŸer deÄŸerlerinin kaydedilmesine izin veren.
// Session storage: Bir web tarayÄ±cÄ±sÄ±nda anahtar/deÄŸer deÄŸerleri yalnÄ±zca bir oturum sÃ¼resi iÃ§in tarayÄ±cÄ±ya kaydedilmesine izin veren bir Ã¶zelliktir. Yani sekme tarayÄ±cÄ±sÄ± kapatÄ±ldÄ±ÄŸÄ±nda de yok eder
const productsDiv = document.querySelector(".products"); //ðŸ‘†query selector ile classÄ± products olan divi seÃ§tik ve bir deÄŸiÅŸkene atadÄ±k
productsDiv.addEventListener("click",(event)=>{
    if(event.target.className == "fa-solid fa-minus"){
        if(event.target.parentElement.querySelector(".quantity").innerText > 1){
event.target.parentElement.querySelector(".quantity").innerText--
        }else{
            if(confirm(
                `${
                    event.target.parentElement.parentElement.querySelector("h2").innerText
                } will be deleted`
                
            ))//confirm tamam ve iptaliÃ§eren uyarÄ±
            {
                event.target.closest(".product").remove();//closest yakaladÄ±ÄŸÄ±m yerin en yakÄ±nÄ±nda classÄ± product olan yapÄ±yÄ± silecek.
            }
        }
    }
    else if(event.target.className == "fa-solid fa-plus"){
        // event.target.previousElementSibling.innerText++;
        // event.target.querySelector(".quantity").innerText++;
       event.target.parentElement.querySelector(".quantity").innerText++;



    }else if(event.target.className == "remove-product"){
        event.target.closest(".product").remove();

    }
    calculateProductPrice(event.target);
    calculateCartPrice();

});
//target demek tÄ±kladÄ±ÄŸÄ±m yeri yakala demek.capturing dÄ±ÅŸtan iÃ§e yakalamaya deniyor.eÄŸer quantity dediÄŸim ÅŸey 1 den bÃ¼yÃ¼kse parentÄ±nÄ± yakala ve innerText i birer birer azalt.

const calculateProductPrice = (btn) =>{
const productInfoDiv = btn.parentElement.parentElement;
const price =Number( productInfoDiv.querySelector(".product-price strong").innerText);
const quantity =Number( productInfoDiv.querySelector(".quantity").innerText);
const productTotalDiv = productInfoDiv.querySelector(".price")

productTotalDiv.innerText = (price * quantity).toFixed(2);
}

const calculateCartPrice = () =>{
    const productsTotalPricesDiv = document.querySelectorAll(".price");
    const subtotal = [...productsTotalPricesDiv].reduce((acc,price)=>acc + Number(price.innerText),0);
    const taxtPrice = subtotal * localStorage.getItem("taxtRate")
   const shippingPrice =  parseFloat(subtotal > 0 && subtotal < localStorage.getItem("shippingFreePprice") ?
   localStorage.getItem("shippingPrice") :
   0)
    const totalCart = subtotal + taxtPrice + shippingPrice;

    document.querySelector("#subtotalCart").innerText = subtotal.toFixed(2);
    document.querySelector("#taxtRateCart").innerText = taxtPrice.toFixed(2);
    document.querySelector("#shippingCart").innerText = shippingPrice.toFixed(2);
    document.querySelector("#totalCart").innerText = totalCart.toFixed(2);
}